#!/usr/bin/env python3
# coding: utf-8

import sys
from genomeAPCAT import __version__ as version

from genomeAPCAT.subcommands import qc_and_annote
from genomeAPCAT.subcommands import pangenome
from genomeAPCAT.subcommands import corepers
from genomeAPCAT.subcommands import align
from genomeAPCAT.subcommands import tree


def main():
    """
    Start program according to arguments given by user.
    """
    action, args = parse_arguments(sys.argv[1:])
    # loglevel = {0: logging.ERROR,
    #             1: logging.WARNING,
    #             2: logging.INFO,
    #             3: logging.DEBUG,
    #            }.get(verbosity, logging.DEBUG)
    action(args)


def parse_arguments(argv):
    """
    Extract command-line arguments for different actions.
    """
    import argparse

    # Create main parser
    parser = argparse.ArgumentParser(description=("genomeAPCAT - Large scale comparative"
                                                  " genomics tools"),
                                     prog='genomeAPCAT')

    parser.add_argument('-V', '--version', action='version',
            version='genomeAPCAT - v. ' + str(version),
            help="Print the version number and exit")
    # parser.add_argument('-v', '--verbose', dest='verbosity',
    #         action='count', default=1,
    #         help="Be more verbose. Specify -vv or -vvv for even more")
    # parser.add_argument('-q', '--quiet', action='store_const', const=0,
    #         dest='verbosity', help="Suppress output")

    # Create subparsers, for all submodules
    subparsers = parser.add_subparsers(dest='subparser_called')
    # dest: to be able to get the subparser called with args.subparser_called
    actions = {}  # to add the action to do according to the subparser called
    checks = {}   # to add the function to call to check the subparser arguments

    # QC and annotation part
    parser_annote = subparsers.add_parser('annotate',
                                       help="Quality control and annotation of genomes",
                                       add_help=False)
    qc_and_annote.build_parser(parser_annote)
    actions["annotate"] = qc_and_annote.main_from_parse
    checks["annotate"] = qc_and_annote.check_args

    # Pan genome part
    parser_pan = subparsers.add_parser('pangenome', help="Generate a pan-genome of your dataset",
                                       add_help=False)
    pangenome.build_parser(parser_pan)
    actions["pangenome"] = pangenome.main_from_parse

    # Persistent genome part
    parser_corepers = subparsers.add_parser('corepers',
                                     help="Compute a Core or Persistent genome of your dataset",
                                     add_help=False)
    corepers.build_parser(parser_corepers)
    actions["corepers"] = corepers.main_from_parse
    checks["corepers"] = corepers.check_args

    # Alignment part
    parser_align = subparsers.add_parser('align',
                                         help="Align Core/Persistent familiest",
                                         add_help=False)
    align.build_parser(parser_align)
    actions["align"] = align.main_from_parse

    # tree part
    parser_tree = subparsers.add_parser('tree',
                                       help=("Infer phylogenetic tree based on "
                                             "core/persistent genome"),
                                       add_help=False)
    tree.build_parser(parser_tree)
    actions["tree"] = tree.main_from_parse
    checks["tree"] = tree.check_args

    # Parse arguments and execute corresponding action
    arguments = parser.parse_args(argv)
    arguments.argv = argv
    action_called = arguments.subparser_called
    # If checks are needed, do it (if some arguments are not compatible etc.)
    if action_called in checks:
        checks[action_called](parser, arguments)

    # If subparser called does not exist, error
    if action_called not in actions:
        parser.error("too few arguments. Use '-h' to get help.")
    return actions[action_called], arguments


if __name__ == '__main__':
    main()
