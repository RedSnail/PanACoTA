#!/usr/bin/env python3
# coding: utf-8

"""
Unit tests for quicktree_func submodule of tree_module
"""

import os

import genomeAPCAT.tree_module.quicktree_func as qt


# Define common variables
ALIGN = os.path.join("test", "data", "align", "exp_files", "exp_pers4genomes.grp.aln")
TREEPATH = os.path.join("test", "data", "tree")
EXPPATH = os.path.join(TREEPATH, "exp_files")


def test_convert_stockholm(caplog):
    """
    Test that when giving a valid fasta alignment file, it converts it to Stockholm format,
    as expected.
    """
    outfile = "test_2stockholm"
    qt.convert2stockholm(ALIGN, outfile)
    exp_stk = os.path.join(EXPPATH, "exp_align_stockholm.stk")
    assert os.path.isfile(outfile)
    same_files(outfile, exp_stk)
    os.remove(outfile)
    assert "Converting fasta alignment to stockholm format" in caplog.text


def test_convert_exists(caplog):
    """
    Test that when asking to convert a file in stockholm format, but output file already exists,
    it does not convert again, and writes warning message saying that current file will be used.
    """
    exp_stk = os.path.join(EXPPATH, "exp_align_stockholm.stk")
    assert qt.convert2stockholm(ALIGN, exp_stk) is None
    assert 'Stockholm alignment file already existing.' in caplog.text
    assert ("The Stockholm alignment file test/data/tree/exp_files/exp_align_stockholm.stk "
            "already exists. The program will use it instead of re-converting "
            "test/data/align/exp_files/exp_pers4genomes.grp.aln") in caplog.text


def same_files(file_out, file_exp):
    """
    Check that the 2 files have the same content.

    Parameters
    ----------
    file_out : str
        file generated by the test
    file_exp : str
        file containing what should be generated
    """
    with open(file_out, "r") as fo, open(file_exp, "r") as fe:
        lines_out = fo.readlines()
        lines_exp = fe.readlines()
        assert len(lines_exp) == len(lines_out)
        for linout, linexp in zip(lines_out, lines_exp):
            assert linout == linexp